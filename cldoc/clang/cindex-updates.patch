diff --git b/cldoc/clang/cindex.py a/cldoc/clang/cindex.py
index aeb34f8..721575a 100644
--- b/cldoc/clang/cindex.py
+++ a/cldoc/clang/cindex.py
@@ -1,3 +1,15 @@
+# This file is part of cldoc.  cldoc is free software: you can
+# redistribute it and/or modify it under the terms of the GNU General Public
+# License as published by the Free Software Foundation, version 2.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+# details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program; if not, write to the Free Software Foundation, Inc., 51
+# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #===- cindex.py - Python Indexing Library Bindings -----------*- python -*--===#
 #
 #                     The LLVM Compiler Infrastructure
@@ -65,7 +77,7 @@ call is efficient.
 from ctypes import *
 import collections
 
-import clang.enumerations
+from . import enumerations
 
 # ctypes doesn't implicitly convert c_void_p to the appropriate wrapper
 # object. This is a problem, because it means that from_parameter will see an
@@ -392,6 +404,13 @@ class Diagnostic(object):
         return conf.lib.clang_getDiagnosticOption(self, None)
 
     @property
+    def format(self, options=-1):
+        if options == -1:
+            options = conf.lib.clang_defaultDiagnosticDisplayOptions()
+
+        return conf.lib.clang_formatDiagnostic(self, options)
+
+    @property
     def disable_option(self):
         """The command-line option that disables this diagnostic."""
         disable = _CXString()
@@ -1136,6 +1155,8 @@ CursorKind.INCLUSION_DIRECTIVE = CursorKind(503)
 CursorKind.MODULE_IMPORT_DECL = CursorKind(600)
 # A type alias template declaration
 CursorKind.TYPE_ALIAS_TEMPLATE_DECL = CursorKind(601)
+# A static_assert or _Static_assert node
+CursorKind.STATIC_ASSERT = CursorKind(602)
 
 # A code completion overload candidate.
 CursorKind.OVERLOAD_CANDIDATE = CursorKind(700)
@@ -1445,6 +1466,9 @@ class Cursor(Structure):
 
         return self._hash
 
+    def __hash__(self):
+        return self.hash
+
     @property
     def semantic_parent(self):
         """Return the semantic parent for this cursor."""
@@ -1576,6 +1600,20 @@ class Cursor(Structure):
         """
         return conf.lib.clang_getFieldDeclBitWidth(self)
 
+    @property
+    def specialized_cursor_template(self):
+        """
+        Retrieve the specialized cursor template.
+        """
+        return conf.lib.clang_getSpecializedCursorTemplate(self)
+
+    @property
+    def template_cursor_kind(self):
+        """
+        Retrieve the template cursor kind.
+        """
+        return conf.lib.clang_getTemplateCursorKind(self)
+
     @staticmethod
     def from_result(res, fn, args):
         assert isinstance(res, Cursor)
@@ -3025,6 +3063,15 @@ functionList = [
   ("clang_disposeDiagnostic",
    [Diagnostic]),
 
+  ("clang_defaultDiagnosticDisplayOptions",
+   [],
+   c_uint),
+
+  ("clang_formatDiagnostic",
+   [Diagnostic, c_uint],
+   _CXString,
+   _CXString.from_result),
+
   ("clang_disposeIndex",
    [Index]),
 
@@ -3717,7 +3764,7 @@ class Config:
         return True
 
 def register_enumerations():
-    for name, value in clang.enumerations.TokenKinds:
+    for name, value in enumerations.TokenKinds:
         TokenKind.register(value, name)
 
 conf = Config()
